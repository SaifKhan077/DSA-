import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class ltask3 {
    public List<List<Integer>> combinationSum(int[] nums, int target) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(nums);  // Sort to handle duplicates and for early stopping
        backtrack(nums, target, 0, new ArrayList<>(), result);
        return result;
    }
    private void backtrack(int[] nums, int target, int start, List<Integer> combination, List<List<Integer>> result) {
        if (target == 0) {
            result.add(new ArrayList<>(combination));
            return;
        }
        for (int i = start; i < nums.length; i++) {
            if (i > start && nums[i] == nums[i - 1]) continue; // Skip duplicates
            if (nums[i] > target) break; // Early stopping
            combination.add(nums[i]);
            backtrack(nums, target - nums[i], i + 1, combination, result);
            combination.remove(combination.size() - 1); // Backtrack
        }
    }
    public static void main(String[] args) {
        ltask3 cs = new ltask3();
        int[] nums = {10, 1, 2, 7, 6, 5};
        int target = 8;
        System.out.println(cs.combinationSum(nums, target));
    }
}

